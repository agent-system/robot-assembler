(defun print-as-yaml (elm &key (strm t) (indent ""))
  (let ((key (car elm))
        (val (cadr elm)))
    (when (not (keywordp key))
      (warn ";; invalid key: ~A~%" key)
      (return-from print-as-yaml))
    (when (listp val)
      (format strm "~A~A:" indent (string-downcase (string key)))
      (dolist (v val)
        (format strm "~%")
        (print-as-yaml v :strm strm :indent (format nil "~A  " indent))
        )
      (return-from print-as-yaml))
    ;; (atom val)
    (cond
     ((symbolp val)
      (setq val (string-downcase (string val))))
     (t ;; if val is string :=> not implemented

      ))
    (format strm "~A~A: ~A" indent
            (string-downcase (string key)) val)
    ))

(defun roboasm-to-yaml (a-hist &key (strm t))
  (let ((aconfig (assoc :assemble-config a-hist)))
    (if aconfig (setq a-hist (remove aconfig a-hist)))
    (unless (cadr (assoc :initial-parts (car a-hist)))
      (warn ";; history do not start-with :initial-parts~%")
      (return-from parse-roboasm))
    ;;(pprint a-hist)
    (format strm "history:~%")
    (dolist (hist-item a-hist)
      (format strm "  -~%")
      (dolist (elm hist-item)
        (print-as-yaml elm :indent "    ")
        (format t "~%")
        ))
    ;;(pprint (cdr aconfig))
    (when aconfig
      (format strm "assemble-config:~%")
      (dolist (conf-item (cdr aconfig))
        (print-as-yaml conf-item :indent "  ")
        (format t "~%")
        ))
    ))
